package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i fisherman/internal.Shell -o ./testing/mocks/shell_mock.go

import (
	"context"
	"fisherman/pkg/shell"
	"io"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ShellMock implements internal.Shell
type ShellMock struct {
	t minimock.Tester

	funcExec          func(ctx context.Context, w1 io.Writer, s1 string, sp1 *shell.Script) (err error)
	inspectFuncExec   func(ctx context.Context, w1 io.Writer, s1 string, sp1 *shell.Script)
	afterExecCounter  uint64
	beforeExecCounter uint64
	ExecMock          mShellMockExec
}

// NewShellMock returns a mock for internal.Shell
func NewShellMock(t minimock.Tester) *ShellMock {
	m := &ShellMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.ExecMock = mShellMockExec{mock: m}
	m.ExecMock.callArgs = []*ShellMockExecParams{}

	return m
}

type mShellMockExec struct {
	mock               *ShellMock
	defaultExpectation *ShellMockExecExpectation
	expectations       []*ShellMockExecExpectation

	callArgs []*ShellMockExecParams
	mutex    sync.RWMutex
}

// ShellMockExecExpectation specifies expectation struct of the Shell.Exec
type ShellMockExecExpectation struct {
	mock    *ShellMock
	params  *ShellMockExecParams
	results *ShellMockExecResults
	Counter uint64
}

// ShellMockExecParams contains parameters of the Shell.Exec
type ShellMockExecParams struct {
	ctx context.Context
	w1  io.Writer
	s1  string
	sp1 *shell.Script
}

// ShellMockExecResults contains results of the Shell.Exec
type ShellMockExecResults struct {
	err error
}

// Expect sets up expected params for Shell.Exec
func (mmExec *mShellMockExec) Expect(ctx context.Context, w1 io.Writer, s1 string, sp1 *shell.Script) *mShellMockExec {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("ShellMock.Exec mock is already set by Set")
	}

	if mmExec.defaultExpectation == nil {
		mmExec.defaultExpectation = &ShellMockExecExpectation{}
	}

	mmExec.defaultExpectation.params = &ShellMockExecParams{ctx, w1, s1, sp1}
	for _, e := range mmExec.expectations {
		if minimock.Equal(e.params, mmExec.defaultExpectation.params) {
			mmExec.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmExec.defaultExpectation.params)
		}
	}

	return mmExec
}

// Inspect accepts an inspector function that has same arguments as the Shell.Exec
func (mmExec *mShellMockExec) Inspect(f func(ctx context.Context, w1 io.Writer, s1 string, sp1 *shell.Script)) *mShellMockExec {
	if mmExec.mock.inspectFuncExec != nil {
		mmExec.mock.t.Fatalf("Inspect function is already set for ShellMock.Exec")
	}

	mmExec.mock.inspectFuncExec = f

	return mmExec
}

// Return sets up results that will be returned by Shell.Exec
func (mmExec *mShellMockExec) Return(err error) *ShellMock {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("ShellMock.Exec mock is already set by Set")
	}

	if mmExec.defaultExpectation == nil {
		mmExec.defaultExpectation = &ShellMockExecExpectation{mock: mmExec.mock}
	}
	mmExec.defaultExpectation.results = &ShellMockExecResults{err}
	return mmExec.mock
}

//Set uses given function f to mock the Shell.Exec method
func (mmExec *mShellMockExec) Set(f func(ctx context.Context, w1 io.Writer, s1 string, sp1 *shell.Script) (err error)) *ShellMock {
	if mmExec.defaultExpectation != nil {
		mmExec.mock.t.Fatalf("Default expectation is already set for the Shell.Exec method")
	}

	if len(mmExec.expectations) > 0 {
		mmExec.mock.t.Fatalf("Some expectations are already set for the Shell.Exec method")
	}

	mmExec.mock.funcExec = f
	return mmExec.mock
}

// When sets expectation for the Shell.Exec which will trigger the result defined by the following
// Then helper
func (mmExec *mShellMockExec) When(ctx context.Context, w1 io.Writer, s1 string, sp1 *shell.Script) *ShellMockExecExpectation {
	if mmExec.mock.funcExec != nil {
		mmExec.mock.t.Fatalf("ShellMock.Exec mock is already set by Set")
	}

	expectation := &ShellMockExecExpectation{
		mock:   mmExec.mock,
		params: &ShellMockExecParams{ctx, w1, s1, sp1},
	}
	mmExec.expectations = append(mmExec.expectations, expectation)
	return expectation
}

// Then sets up Shell.Exec return parameters for the expectation previously defined by the When method
func (e *ShellMockExecExpectation) Then(err error) *ShellMock {
	e.results = &ShellMockExecResults{err}
	return e.mock
}

// Exec implements internal.Shell
func (mmExec *ShellMock) Exec(ctx context.Context, w1 io.Writer, s1 string, sp1 *shell.Script) (err error) {
	mm_atomic.AddUint64(&mmExec.beforeExecCounter, 1)
	defer mm_atomic.AddUint64(&mmExec.afterExecCounter, 1)

	if mmExec.inspectFuncExec != nil {
		mmExec.inspectFuncExec(ctx, w1, s1, sp1)
	}

	mm_params := &ShellMockExecParams{ctx, w1, s1, sp1}

	// Record call args
	mmExec.ExecMock.mutex.Lock()
	mmExec.ExecMock.callArgs = append(mmExec.ExecMock.callArgs, mm_params)
	mmExec.ExecMock.mutex.Unlock()

	for _, e := range mmExec.ExecMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmExec.ExecMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmExec.ExecMock.defaultExpectation.Counter, 1)
		mm_want := mmExec.ExecMock.defaultExpectation.params
		mm_got := ShellMockExecParams{ctx, w1, s1, sp1}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmExec.t.Errorf("ShellMock.Exec got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmExec.ExecMock.defaultExpectation.results
		if mm_results == nil {
			mmExec.t.Fatal("No results are set for the ShellMock.Exec")
		}
		return (*mm_results).err
	}
	if mmExec.funcExec != nil {
		return mmExec.funcExec(ctx, w1, s1, sp1)
	}
	mmExec.t.Fatalf("Unexpected call to ShellMock.Exec. %v %v %v %v", ctx, w1, s1, sp1)
	return
}

// ExecAfterCounter returns a count of finished ShellMock.Exec invocations
func (mmExec *ShellMock) ExecAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExec.afterExecCounter)
}

// ExecBeforeCounter returns a count of ShellMock.Exec invocations
func (mmExec *ShellMock) ExecBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmExec.beforeExecCounter)
}

// Calls returns a list of arguments used in each call to ShellMock.Exec.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmExec *mShellMockExec) Calls() []*ShellMockExecParams {
	mmExec.mutex.RLock()

	argCopy := make([]*ShellMockExecParams, len(mmExec.callArgs))
	copy(argCopy, mmExec.callArgs)

	mmExec.mutex.RUnlock()

	return argCopy
}

// MinimockExecDone returns true if the count of the Exec invocations corresponds
// the number of defined expectations
func (m *ShellMock) MinimockExecDone() bool {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		return false
	}
	return true
}

// MinimockExecInspect logs each unmet expectation
func (m *ShellMock) MinimockExecInspect() {
	for _, e := range m.ExecMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ShellMock.Exec with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.ExecMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		if m.ExecMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to ShellMock.Exec")
		} else {
			m.t.Errorf("Expected call to ShellMock.Exec with params: %#v", *m.ExecMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcExec != nil && mm_atomic.LoadUint64(&m.afterExecCounter) < 1 {
		m.t.Error("Expected call to ShellMock.Exec")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ShellMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockExecInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ShellMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ShellMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockExecDone()
}
