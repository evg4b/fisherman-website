package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i fisherman/internal/handling.Factory -o ./testing/mocks/factory_mock.go

import (
	mm_handling "fisherman/internal/handling"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// FactoryMock implements handling.Factory
type FactoryMock struct {
	t minimock.Tester

	funcGetHook          func(name string, global map[string]interface{}) (h1 mm_handling.Handler, err error)
	inspectFuncGetHook   func(name string, global map[string]interface{})
	afterGetHookCounter  uint64
	beforeGetHookCounter uint64
	GetHookMock          mFactoryMockGetHook
}

// NewFactoryMock returns a mock for handling.Factory
func NewFactoryMock(t minimock.Tester) *FactoryMock {
	m := &FactoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetHookMock = mFactoryMockGetHook{mock: m}
	m.GetHookMock.callArgs = []*FactoryMockGetHookParams{}

	return m
}

type mFactoryMockGetHook struct {
	mock               *FactoryMock
	defaultExpectation *FactoryMockGetHookExpectation
	expectations       []*FactoryMockGetHookExpectation

	callArgs []*FactoryMockGetHookParams
	mutex    sync.RWMutex
}

// FactoryMockGetHookExpectation specifies expectation struct of the Factory.GetHook
type FactoryMockGetHookExpectation struct {
	mock    *FactoryMock
	params  *FactoryMockGetHookParams
	results *FactoryMockGetHookResults
	Counter uint64
}

// FactoryMockGetHookParams contains parameters of the Factory.GetHook
type FactoryMockGetHookParams struct {
	name   string
	global map[string]interface{}
}

// FactoryMockGetHookResults contains results of the Factory.GetHook
type FactoryMockGetHookResults struct {
	h1  mm_handling.Handler
	err error
}

// Expect sets up expected params for Factory.GetHook
func (mmGetHook *mFactoryMockGetHook) Expect(name string, global map[string]interface{}) *mFactoryMockGetHook {
	if mmGetHook.mock.funcGetHook != nil {
		mmGetHook.mock.t.Fatalf("FactoryMock.GetHook mock is already set by Set")
	}

	if mmGetHook.defaultExpectation == nil {
		mmGetHook.defaultExpectation = &FactoryMockGetHookExpectation{}
	}

	mmGetHook.defaultExpectation.params = &FactoryMockGetHookParams{name, global}
	for _, e := range mmGetHook.expectations {
		if minimock.Equal(e.params, mmGetHook.defaultExpectation.params) {
			mmGetHook.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetHook.defaultExpectation.params)
		}
	}

	return mmGetHook
}

// Inspect accepts an inspector function that has same arguments as the Factory.GetHook
func (mmGetHook *mFactoryMockGetHook) Inspect(f func(name string, global map[string]interface{})) *mFactoryMockGetHook {
	if mmGetHook.mock.inspectFuncGetHook != nil {
		mmGetHook.mock.t.Fatalf("Inspect function is already set for FactoryMock.GetHook")
	}

	mmGetHook.mock.inspectFuncGetHook = f

	return mmGetHook
}

// Return sets up results that will be returned by Factory.GetHook
func (mmGetHook *mFactoryMockGetHook) Return(h1 mm_handling.Handler, err error) *FactoryMock {
	if mmGetHook.mock.funcGetHook != nil {
		mmGetHook.mock.t.Fatalf("FactoryMock.GetHook mock is already set by Set")
	}

	if mmGetHook.defaultExpectation == nil {
		mmGetHook.defaultExpectation = &FactoryMockGetHookExpectation{mock: mmGetHook.mock}
	}
	mmGetHook.defaultExpectation.results = &FactoryMockGetHookResults{h1, err}
	return mmGetHook.mock
}

//Set uses given function f to mock the Factory.GetHook method
func (mmGetHook *mFactoryMockGetHook) Set(f func(name string, global map[string]interface{}) (h1 mm_handling.Handler, err error)) *FactoryMock {
	if mmGetHook.defaultExpectation != nil {
		mmGetHook.mock.t.Fatalf("Default expectation is already set for the Factory.GetHook method")
	}

	if len(mmGetHook.expectations) > 0 {
		mmGetHook.mock.t.Fatalf("Some expectations are already set for the Factory.GetHook method")
	}

	mmGetHook.mock.funcGetHook = f
	return mmGetHook.mock
}

// When sets expectation for the Factory.GetHook which will trigger the result defined by the following
// Then helper
func (mmGetHook *mFactoryMockGetHook) When(name string, global map[string]interface{}) *FactoryMockGetHookExpectation {
	if mmGetHook.mock.funcGetHook != nil {
		mmGetHook.mock.t.Fatalf("FactoryMock.GetHook mock is already set by Set")
	}

	expectation := &FactoryMockGetHookExpectation{
		mock:   mmGetHook.mock,
		params: &FactoryMockGetHookParams{name, global},
	}
	mmGetHook.expectations = append(mmGetHook.expectations, expectation)
	return expectation
}

// Then sets up Factory.GetHook return parameters for the expectation previously defined by the When method
func (e *FactoryMockGetHookExpectation) Then(h1 mm_handling.Handler, err error) *FactoryMock {
	e.results = &FactoryMockGetHookResults{h1, err}
	return e.mock
}

// GetHook implements handling.Factory
func (mmGetHook *FactoryMock) GetHook(name string, global map[string]interface{}) (h1 mm_handling.Handler, err error) {
	mm_atomic.AddUint64(&mmGetHook.beforeGetHookCounter, 1)
	defer mm_atomic.AddUint64(&mmGetHook.afterGetHookCounter, 1)

	if mmGetHook.inspectFuncGetHook != nil {
		mmGetHook.inspectFuncGetHook(name, global)
	}

	mm_params := &FactoryMockGetHookParams{name, global}

	// Record call args
	mmGetHook.GetHookMock.mutex.Lock()
	mmGetHook.GetHookMock.callArgs = append(mmGetHook.GetHookMock.callArgs, mm_params)
	mmGetHook.GetHookMock.mutex.Unlock()

	for _, e := range mmGetHook.GetHookMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.h1, e.results.err
		}
	}

	if mmGetHook.GetHookMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetHook.GetHookMock.defaultExpectation.Counter, 1)
		mm_want := mmGetHook.GetHookMock.defaultExpectation.params
		mm_got := FactoryMockGetHookParams{name, global}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetHook.t.Errorf("FactoryMock.GetHook got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetHook.GetHookMock.defaultExpectation.results
		if mm_results == nil {
			mmGetHook.t.Fatal("No results are set for the FactoryMock.GetHook")
		}
		return (*mm_results).h1, (*mm_results).err
	}
	if mmGetHook.funcGetHook != nil {
		return mmGetHook.funcGetHook(name, global)
	}
	mmGetHook.t.Fatalf("Unexpected call to FactoryMock.GetHook. %v %v", name, global)
	return
}

// GetHookAfterCounter returns a count of finished FactoryMock.GetHook invocations
func (mmGetHook *FactoryMock) GetHookAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetHook.afterGetHookCounter)
}

// GetHookBeforeCounter returns a count of FactoryMock.GetHook invocations
func (mmGetHook *FactoryMock) GetHookBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetHook.beforeGetHookCounter)
}

// Calls returns a list of arguments used in each call to FactoryMock.GetHook.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetHook *mFactoryMockGetHook) Calls() []*FactoryMockGetHookParams {
	mmGetHook.mutex.RLock()

	argCopy := make([]*FactoryMockGetHookParams, len(mmGetHook.callArgs))
	copy(argCopy, mmGetHook.callArgs)

	mmGetHook.mutex.RUnlock()

	return argCopy
}

// MinimockGetHookDone returns true if the count of the GetHook invocations corresponds
// the number of defined expectations
func (m *FactoryMock) MinimockGetHookDone() bool {
	for _, e := range m.GetHookMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetHookMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetHookCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetHook != nil && mm_atomic.LoadUint64(&m.afterGetHookCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetHookInspect logs each unmet expectation
func (m *FactoryMock) MinimockGetHookInspect() {
	for _, e := range m.GetHookMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to FactoryMock.GetHook with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetHookMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetHookCounter) < 1 {
		if m.GetHookMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to FactoryMock.GetHook")
		} else {
			m.t.Errorf("Expected call to FactoryMock.GetHook with params: %#v", *m.GetHookMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetHook != nil && mm_atomic.LoadUint64(&m.afterGetHookCounter) < 1 {
		m.t.Error("Expected call to FactoryMock.GetHook")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *FactoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetHookInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *FactoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *FactoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetHookDone()
}
